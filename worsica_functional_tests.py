# Generated by Selenium IDE
import time
import os
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.chrome.options import Options as ChromeOptions
from selenium.webdriver.firefox.options import Options as FirefoxOptions
from selenium.webdriver.support import expected_conditions as EC

from worsica_web import settings
from worsica_portal import logger
import argparse

worsica_logger = logger.init_logger('WorSiCa-Portal.FunctionalTests', settings.LOG_PATH)

WAIT_TIMEOUT_SEC = 20
WAIT_TIME_SEC = 2
WINDOW_WIDTH = 1366
WINDOW_HEIGHT = 768
WORSICA_WEB_PATH = os.getcwd()
ENDPOINT_URL = "http://frontend:8001"
COASTAL_URL = "/portal/coastal"
INLAND_URL = "/portal/inland"
WATERLEAK_URL = "/portal/waterleak"
TEST_USERNAME = os.getenv('WORSICA_FRONTEND_SELENIUM_USERNAME')
TEST_PWD = os.getenv('WORSICA_FRONTEND_SELENIUM_PWD')
HEADLESS = True


def _do_login(driver):
    '''
    driver does the login
    '''
    worsica_logger.info('[do_login]: Login')
    WebDriverWait(driver, WAIT_TIMEOUT_SEC).until(EC.presence_of_element_located((By.ID, "email")))
    driver.find_element(By.ID, "email").send_keys(TEST_USERNAME)
    driver.find_element(By.ID, "password").send_keys(TEST_PWD)
    driver.find_element(By.CSS_SELECTOR, ".btn").click()  # click on login
    time.sleep(WAIT_TIME_SEC)


def _do_logout(driver):
    '''
    driver does the logout
    '''
    worsica_logger.info('[do_logout]: Logout')
    driver.find_element(By.CSS_SELECTOR, ".dropdown-toggle").click()
    driver.find_element(By.LINK_TEXT, "Logout").click()
    time.sleep(WAIT_TIME_SEC)


def t01_authentication(driver):
    '''
    T01: do a simple test with authentication
    Steps:
    1- Login
    2- Go directly to the workspaces pages, do nothing
    3- Logout
    '''
    worsica_logger.info('[t01_authentication]: do a simple test with authentication')
    driver.get(ENDPOINT_URL+COASTAL_URL)
    # Loginpage
    _do_login(driver)
    # Logout
    _do_logout(driver)
    worsica_logger.info('[t01_authentication]: OK!')


def t02_create_coastal_processing(driver):
    '''
    T02: test the interaction for creating a coastline detection and then remove it (we will not run it)
    Steps:
    1- Login
    2- Go directly to the coastal service
    3- Click on the 'REGION OF INTEREST'
    4- Step1 (Region Of Interest) Fill in name and draw on the map the ROI
    5- Step2 (Inputs) List L1C, L2a with 10% CC. Click Level1C.
    6- Step3 (Inputs Revision) Select first two images
    7- Step4 (Detection) Do nothing
    8- Step5 (Opencoasts) Just disable the connection
    9- Step6 (Run) Set name but then do not submit, just close the wizard.
    10- Go to detection manager and delete ROI.
    11- Logout
    '''
    driver.get(ENDPOINT_URL+COASTAL_URL)
    # Login
    _do_login(driver)
    # this is required since this test is too fast and needs to wait the workspace page finishes loading
    # in this test, it's expected to have an empty workspace with no detections, and start zoom in.
    # otherwise the workspace will be loaded zoomed to the extent of the created detections
    # check if there are any detections, in order to not zoom in again
    WebDriverWait(driver, timeout=7).until(lambda d: len(
        d.find_elements(By.CSS_SELECTOR, "#selectROI option")) > 0)
    if len(driver.find_elements(By.CSS_SELECTOR, "#selectROI option")) == 1:
        # if no detections were done, zoom the map
        worsica_logger.info("[t02_create_coastal_processing]: Zoom in")
        for zoom in range(0, 4):
            driver.find_element(By.ID, 'new-zoom-control-zoomin').click()
            time.sleep(0.5)
        time.sleep(WAIT_TIME_SEC)
        worsica_logger.info("[t02_create_coastal_processing]: Move the map")
        # BUG: this does not work in chrome
        moveActions = ActionChains(driver)
        moveActions.move_by_offset(300, 200)  # start point
        moveActions.click_and_hold()  # hold left btn
        moveActions.move_by_offset(100, 300)  # end point
        moveActions.release()  # release left button
        moveActions.perform()  # perform action
        moveActions.reset_actions()
        time.sleep(WAIT_TIME_SEC)
    worsica_logger.info("[t02_create_coastal_processing]: Click on the 'Region Of Interest'")
    driver.find_element(By.ID, "step-ph1").click()  # step1ROI
    # =================Step1 (Region Of Interest)=================
    worsica_logger.info(
        "[t02_create_coastal_processing]: Step1 (Region Of Interest) Fill in name and draw on the map the ROI")
    driver.find_element(By.ID, "roiName").send_keys('Selenium Test')
    time.sleep(WAIT_TIME_SEC)
    driver.find_element(By.ID, "iconDrawPolygon").click()
    time.sleep(WAIT_TIME_SEC)
    # draw on the map a square ROI
    drawROIActions = ActionChains(driver)
    drawROIActions.move_by_offset(600, 300)  # start point
    drawROIActions.click_and_hold()  # hold left btn
    drawROIActions.move_by_offset(-100, 100)  # end point
    drawROIActions.release()  # release left button
    drawROIActions.perform()  # perform action
    drawROIActions.reset_actions()
    time.sleep(WAIT_TIME_SEC)
    driver.find_element(By.ID, "bnext").click()
    # =================Step2 (Inputs)=================
    worsica_logger.info(
        "[t02_create_coastal_processing]: Step2 (Inputs) List L1C, L2a with 10% CC. Click Level1C. ")
    time.sleep(WAIT_TIME_SEC)
    driver.find_element(By.ID, "optSentinel2-L1C").click()
    time.sleep(WAIT_TIME_SEC)
    driver.find_element(By.ID, "bnext").click()
    # =================Step3 (Inputs Revision)=================
    worsica_logger.info(
        "[t02_create_coastal_processing]: Step3 (Inputs Revision) Select first two images ")
    WebDriverWait(driver, timeout=7).until(lambda d: len(
        d.find_elements(By.CSS_SELECTOR, "#listOfImagesets tr")) > 0)
    # driver.find_elements(By.CSS_SELECTOR, "#listOfImagesets tr"):
    tr_imagesets = driver.find_elements(By.CSS_SELECTOR, "#listOfImagesets tr")
    tr_imagesets[0].find_element(By.CLASS_NAME, 'custom-checkbox').click()
    tr_imagesets[1].find_element(By.CLASS_NAME, 'custom-checkbox').click()
    # driver.find_element(By.ID, IMAGESET_ID_TO_SELECT).find_element(By.CSS_SELECTOR, ".btn").click()
    # time.sleep(WAIT_TIME_SEC)
    # next
    time.sleep(WAIT_TIME_SEC)
    driver.find_element(By.ID, "bnext").click()
    # =================Step4 (Detection)=================
    worsica_logger.info("[t02_create_coastal_processing]: Step4 (Detection) Do nothing ")
    time.sleep(WAIT_TIME_SEC)
    driver.find_element(By.ID, "bnext").click()
    # =================Step6 (Run)=================
    worsica_logger.info(
        "[t02_create_coastal_processing]: Step6 (Run) Set name but then do not submit, just close the wizard.")
    driver.find_element(By.ID, 'simulationName').send_keys('Test1')
    time.sleep(WAIT_TIME_SEC)
    driver.find_element(By.ID, 'leftPanel').find_element(
        By.CLASS_NAME, "close").click()  # close the left panel
    time.sleep(WAIT_TIME_SEC)
    driver.find_elements(By.CSS_SELECTOR, ".ui-dialog-buttonset button")[0].click()  # say Yes
    # =================Go to detection manager and delete ROI=================
    worsica_logger.info("[t02_create_coastal_processing]: Go to detection manager and delete ROI.")
    driver.find_element(By.ID, 'showDetectionManager').click()
    time.sleep(WAIT_TIME_SEC)
    tr_roi = driver.find_element(By.ID, "showVisualizationAndDetectionManager").find_elements(
        By.CSS_SELECTOR, "#listOfROI tr")
    tr_roi[0].find_element(By.ID, 'clickDelete').click()
    time.sleep(WAIT_TIME_SEC)
    # Yes, to cleanup everything :)
    driver.find_elements(By.CSS_SELECTOR, ".ui-dialog-buttonset button")[0].click()
    time.sleep(WAIT_TIME_SEC)
    driver.find_element(By.ID, 'rightPanel').find_element(
        By.CLASS_NAME, "close").click()  # close the left panel
    time.sleep(WAIT_TIME_SEC)
    # Logout
    _do_logout(driver)
    worsica_logger.info("[t02_create_coastal_processing]: OK!")


def t03_create_inland_processing(driver):
    '''
    T03: test the interaction for creating a inland detection and then remove it (we will not run it)
    Steps:
    1- Login
    2- Go directly to the inland service
    3- Click on the 'REGION OF INTEREST'
    4- Step1 (Region Of Interest) Fill in name and draw on the map the ROI
    5- Step2 (Inputs) List L1C, L2a with 10% CC. Click Level1C.
    6- Step3 (Inputs Revision) Select first two images
    7- Step4 (Detection) Do nothing
    8- Step5 (Run) Set name but then do not submit, just close the wizard.
    10- Go to detection manager and delete ROI.
    11- Logout
    '''
    driver.get(ENDPOINT_URL+INLAND_URL)
    # Login
    _do_login(driver)
    # this is required since this test is too fast and needs to wait the workspace page finishes loading
    # in this test, it's expected to have an empty workspace with no detections, and start zoom in.
    # otherwise the workspace will be loaded zoomed to the extent of the created detections
    # check if there are any detections, in order to not zoom in again
    WebDriverWait(driver, timeout=7).until(lambda d: len(
        d.find_elements(By.CSS_SELECTOR, "#selectROI option")) > 0)
    if len(driver.find_elements(By.CSS_SELECTOR, "#selectROI option")) == 1:
        # if no detections were done, zoom the map
        worsica_logger.info("[t03_create_inland_processing]: Zoom in")
        for zoom in range(0, 4):
            driver.find_element(By.ID, 'new-zoom-control-zoomin').click()
            time.sleep(0.5)
        time.sleep(WAIT_TIME_SEC)
        worsica_logger.info("[t03_create_inland_processing]: Move the map")
        # BUG: this does not work in chrome
        moveActions = ActionChains(driver)
        moveActions.move_by_offset(300, 200)  # start point
        moveActions.click_and_hold()  # hold left btn
        moveActions.move_by_offset(100, 300)  # end point
        moveActions.release()  # release left button
        moveActions.perform()  # perform action
        moveActions.reset_actions()
        time.sleep(WAIT_TIME_SEC)
    worsica_logger.info("[t03_create_inland_processing]: Click on the 'Region Of Interest'")
    driver.find_element(By.ID, "step-ph1").click()  # step1ROI
    # =================Step1 (Region Of Interest)=================
    worsica_logger.info(
        "[t03_create_inland_processing]: Step1 (Region Of Interest) Fill in name and draw on the map the ROI")
    driver.find_element(By.ID, "roiName").send_keys('Selenium Test')
    time.sleep(WAIT_TIME_SEC)
    driver.find_element(By.ID, "iconDrawPolygon").click()
    time.sleep(WAIT_TIME_SEC)
    # draw on the map a square ROI
    drawROIActions = ActionChains(driver)
    drawROIActions.move_by_offset(600, 300)  # start point
    drawROIActions.click_and_hold()  # hold left btn
    drawROIActions.move_by_offset(-100, 100)  # end point
    drawROIActions.release()  # release left button
    drawROIActions.perform()  # perform action
    drawROIActions.reset_actions()
    time.sleep(WAIT_TIME_SEC)
    driver.find_element(By.ID, "bnext").click()
    # =================Step2 (Inputs)=================
    worsica_logger.info(
        "[t03_create_inland_processing]: Step2 (Inputs) List L1C, L2a with 10% CC. Click Level1C. ")
    time.sleep(WAIT_TIME_SEC)
    driver.find_element(By.ID, "optSentinel2-L1C").click()
    time.sleep(WAIT_TIME_SEC)
    driver.find_element(By.ID, "bnext").click()
    # =================Step3 (Inputs Revision)=================
    worsica_logger.info(
        "[t03_create_inland_processing]: Step3 (Inputs Revision) Select first two images ")
    WebDriverWait(driver, timeout=7).until(lambda d: len(
        d.find_elements(By.CSS_SELECTOR, "#listOfImagesets tr")) > 0)
    # driver.find_elements(By.CSS_SELECTOR, "#listOfImagesets tr"):
    tr_imagesets = driver.find_elements(By.CSS_SELECTOR, "#listOfImagesets tr")
    tr_imagesets[0].find_element(By.CLASS_NAME, 'custom-checkbox').click()
    tr_imagesets[1].find_element(By.CLASS_NAME, 'custom-checkbox').click()
    # driver.find_element(By.ID, IMAGESET_ID_TO_SELECT).find_element(By.CSS_SELECTOR, ".btn").click()
    # time.sleep(WAIT_TIME_SEC)
    # next
    time.sleep(WAIT_TIME_SEC)
    driver.find_element(By.ID, "bnext").click()
    # =================Step4 (Detection)=================
    worsica_logger.info("[t03_create_inland_processing]: Step4 (Detection) Do nothing ")
    time.sleep(WAIT_TIME_SEC)
    driver.find_element(By.ID, "bnext").click()
    # =================Step5 (Run)=================
    worsica_logger.info(
        "[t03_create_inland_processing]: Step6 (Run) Set name but then do not submit, just close the wizard.")
    driver.find_element(By.ID, 'simulationName').send_keys('Test1')
    time.sleep(WAIT_TIME_SEC)
    driver.find_element(By.ID, 'leftPanel').find_element(
        By.CLASS_NAME, "close").click()  # close the left panel
    time.sleep(WAIT_TIME_SEC)
    driver.find_elements(By.CSS_SELECTOR, ".ui-dialog-buttonset button")[0].click()  # say Yes
    # =================Go to detection manager and delete ROI=================
    worsica_logger.info("[t03_create_inland_processing]: Go to detection manager and delete ROI.")
    driver.find_element(By.ID, 'showDetectionManager').click()
    time.sleep(WAIT_TIME_SEC)
    tr_roi = driver.find_element(By.ID, "showVisualizationAndDetectionManager").find_elements(
        By.CSS_SELECTOR, "#listOfROI tr")
    tr_roi[0].find_element(By.ID, 'clickDelete').click()
    time.sleep(WAIT_TIME_SEC)
    # Yes, to cleanup everything :)
    driver.find_elements(By.CSS_SELECTOR, ".ui-dialog-buttonset button")[0].click()
    time.sleep(WAIT_TIME_SEC)
    driver.find_element(By.ID, 'rightPanel').find_element(
        By.CLASS_NAME, "close").click()  # close the left panel
    time.sleep(WAIT_TIME_SEC)
    # Logout
    _do_logout(driver)
    worsica_logger.info("[t03_create_inland_processing]: OK!")


def t04_create_waterleak_processing(driver):
    '''
    T04: test the interaction for creating a waterleak detection and then remove it (we will not run it)
    Steps:
    1- Login
    2- Go directly to the waterleak service
    3- Click on the 'REGION OF INTEREST'
    4- Step1 (Region Of Interest) Fill in name and draw on the map the ROI
    5- Step2 (Inputs) List L1C, L2a with 10% CC. Click Level1C.
    6- Step3 (Inputs Revision) Select first two images
    7- Step4 (Detection) Do nothing
    8- Step5 (Run) Set name but then do not submit, just close the wizard.
    10- Go to detection manager and delete ROI.
    11- Logout
    '''
    driver.get(ENDPOINT_URL+INLAND_URL)
    # Login
    _do_login(driver)
    # this is required since this test is too fast and needs to wait the workspace page finishes loading
    # in this test, it's expected to have an empty workspace with no detections, and start zoom in.
    # otherwise the workspace will be loaded zoomed to the extent of the created detections
    # check if there are any detections, in order to not zoom in again
    WebDriverWait(driver, timeout=7).until(lambda d: len(
        d.find_elements(By.CSS_SELECTOR, "#selectROI option")) > 0)
    if len(driver.find_elements(By.CSS_SELECTOR, "#selectROI option")) == 1:
        # if no detections were done, zoom the map
        worsica_logger.info("[t04_create_waterleak_processing]: Zoom in")
        for zoom in range(0, 4):
            driver.find_element(By.ID, 'new-zoom-control-zoomin').click()
            time.sleep(0.5)
        time.sleep(WAIT_TIME_SEC)
        worsica_logger.info("[t04_create_waterleak_processing]: Move the map")
        # BUG: this does not work in chrome
        moveActions = ActionChains(driver)
        moveActions.move_by_offset(300, 200)  # start point
        moveActions.click_and_hold()  # hold left btn
        moveActions.move_by_offset(100, 300)  # end point
        moveActions.release()  # release left button
        moveActions.perform()  # perform action
        moveActions.reset_actions()
        time.sleep(WAIT_TIME_SEC)
    worsica_logger.info("[t04_create_waterleak_processing]: Click on the 'Region Of Interest'")
    driver.find_element(By.ID, "step-ph1").click()  # step1ROI
    # =================Step1 (Region Of Interest)=================
    worsica_logger.info(
        "[t04_create_waterleak_processing]: Step1 (Region Of Interest) Fill in name and draw on the map the ROI")
    driver.find_element(By.ID, "roiName").send_keys('Selenium Test')
    time.sleep(WAIT_TIME_SEC)
    driver.find_element(By.ID, "iconDrawPolygon").click()
    time.sleep(WAIT_TIME_SEC)
    # draw on the map a square ROI
    drawROIActions = ActionChains(driver)
    drawROIActions.move_by_offset(600, 300)  # start point
    drawROIActions.click_and_hold()  # hold left btn
    drawROIActions.move_by_offset(-100, 100)  # end point
    drawROIActions.release()  # release left button
    drawROIActions.perform()  # perform action
    drawROIActions.reset_actions()
    time.sleep(WAIT_TIME_SEC)
    driver.find_element(By.ID, "bnext").click()
    # =================Step2 (Inputs)=================
    worsica_logger.info(
        "[t04_create_waterleak_processing]: Step2 (Inputs) List L1C, L2a with 10% CC. Click Level1C. ")
    time.sleep(WAIT_TIME_SEC)
    driver.find_element(By.ID, "optSentinel2-L1C").click()
    time.sleep(WAIT_TIME_SEC)
    driver.find_element(By.ID, "bnext").click()
    # =================Step3 (Inputs Revision)=================
    worsica_logger.info(
        "[t04_create_waterleak_processing]: Step3 (Inputs Revision) Select first two images ")
    WebDriverWait(driver, timeout=7).until(lambda d: len(
        d.find_elements(By.CSS_SELECTOR, "#listOfImagesets tr")) > 0)
    # driver.find_elements(By.CSS_SELECTOR, "#listOfImagesets tr"):
    tr_imagesets = driver.find_elements(By.CSS_SELECTOR, "#listOfImagesets tr")
    tr_imagesets[0].find_element(By.CLASS_NAME, 'custom-checkbox').click()
    tr_imagesets[1].find_element(By.CLASS_NAME, 'custom-checkbox').click()
    # driver.find_element(By.ID, IMAGESET_ID_TO_SELECT).find_element(By.CSS_SELECTOR, ".btn").click()
    # time.sleep(WAIT_TIME_SEC)
    # next
    time.sleep(WAIT_TIME_SEC)
    driver.find_element(By.ID, "bnext").click()
    # =================Step4 (Detection)=================
    worsica_logger.info("[t04_create_waterleak_processing]: Step4 (Detection) Do nothing ")
    time.sleep(WAIT_TIME_SEC)
    driver.find_element(By.ID, "bnext").click()
    # =================Step5 (Run)=================
    worsica_logger.info(
        "[t04_create_waterleak_processing]: Step6 (Run) Set name but then do not submit, just close the wizard.")
    driver.find_element(By.ID, 'simulationName').send_keys('Test1')
    time.sleep(WAIT_TIME_SEC)
    driver.find_element(By.ID, 'leftPanel').find_element(
        By.CLASS_NAME, "close").click()  # close the left panel
    time.sleep(WAIT_TIME_SEC)
    driver.find_elements(By.CSS_SELECTOR, ".ui-dialog-buttonset button")[0].click()  # say Yes
    # =================Go to detection manager and delete ROI=================
    worsica_logger.info("[t04_create_waterleak_processing]: Go to detection manager and delete ROI.")
    driver.find_element(By.ID, 'showDetectionManager').click()
    time.sleep(WAIT_TIME_SEC)
    tr_roi = driver.find_element(By.ID, "showVisualizationAndDetectionManager").find_elements(
        By.CSS_SELECTOR, "#listOfROI tr")
    tr_roi[0].find_element(By.ID, 'clickDelete').click()
    time.sleep(WAIT_TIME_SEC)
    # Yes, to cleanup everything :)
    driver.find_elements(By.CSS_SELECTOR, ".ui-dialog-buttonset button")[0].click()
    time.sleep(WAIT_TIME_SEC)
    driver.find_element(By.ID, 'rightPanel').find_element(
        By.CLASS_NAME, "close").click()  # close the left panel
    time.sleep(WAIT_TIME_SEC)
    # Logout
    _do_logout(driver)
    worsica_logger.info("[t04_create_waterleak_processing]: OK!")


def create_driver(driver_name, headless):
    '''
    function to create the driver and its respective options
    '''
    if driver_name == 'chrome':  # chrome
        chrome_options = ChromeOptions()
        chrome_options.headless = headless
        chrome_options.add_argument("--window-size="+str(WINDOW_WIDTH)+","+str(WINDOW_HEIGHT))
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        return webdriver.Chrome(options=chrome_options, executable_path=WORSICA_WEB_PATH+'/functional_tests_files/chromedriver_linux64/chromedriver')
    elif driver_name == 'firefox':
        firefox_options = FirefoxOptions()
        firefox_options.headless = headless
        firefox_options.add_argument("--width="+str(WINDOW_WIDTH))
        firefox_options.add_argument("--height="+str(WINDOW_HEIGHT))
        return webdriver.Firefox(options=firefox_options, executable_path=WORSICA_WEB_PATH+'/functional_tests_files/geckodriver_linux64/geckodriver')
    else:
        raise Exception('ERROR: That driver does not exist.')


def test_web_drivers():
    '''
    do the tests with the chrome driver
    '''
    drivers = ['chrome', 'firefox']
    # set exports for chrome if running this through a X11 remote session
    # if('QT_X11_NO_MITSHM' not in os.environ):
    os.environ['QT_X11_NO_MITSHM'] = '1'
    # if('_X11_NO_MITSHM' not in os.environ):
    os.environ['_X11_NO_MITSHM'] = '1'
    # if('_MITSHM' not in os.environ):
    os.environ['_MITSHM'] = '0'
    for drv in drivers:
        worsica_logger.info('[test_web_drivers]: Test the Web driver: '+drv)
        driver = create_driver(drv, HEADLESS)
        worsica_logger.info('[test_web_drivers]: wait 10s')
        time.sleep(10)
        t01_authentication(driver)
        # t02_create_coastal_processing(driver)
        # t03_create_inland_processing(driver)
        # t04_create_waterleak_processing(driver)
        worsica_logger.info('[test_web_drivers]: Success!')
        driver.close()
        driver.quit()


# Usage: ./worsica_functional_tests.py
# e.g: ./worsica_functional_tests.py
if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description='worsica_functional_tests: Apply functional tests to the web interface.')
    parser.add_argument('-nj', '--nojenkins', help='Do not run these tests as jenkins environment.',
                        action="store_true", required=False)
    parser.add_argument('-nh', '--noheadless', help='Do these tests in non headless mode, i.e, show browser for debug.',
                        action="store_true", required=False)
    args = parser.parse_args()
    if args.noheadless:
        HEADLESS = False
    if args.nojenkins:
        ENDPOINT_URL = "http://localhost:8001"
    worsica_logger.info("Headless? "+str(HEADLESS))
    worsica_logger.info("Endpoint url? "+ENDPOINT_URL)
    test_web_drivers()
    # exit(0)
